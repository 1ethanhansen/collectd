 collectd - System information collection daemon
=================================================
http://collectd.org/

About
-----

  collectd is a small daemon which collects statistics about a computer's
  usage and writes then into RRD files.


Features
--------

  * collectd is able to collect the following data:

    - Apache server utilization
      (Number of bytes transfered, number of requests handled and detailed
      scoreboard statistics)

    - APC UPS Daemon
      (UPS charge, load, input/output/battery voltage, etc)

    - Apple Sensors
      (Temperature, fanspeed and voltage sensors of apple computers)

    - Battery
      (Charge, current and charge of ACPI and PMU based batteries)

    - CPU utilization
      (Time spent in system, user, nice and idle)

    - CPU frequency
      (For laptops with speed step or a similar technology)

    - Mountpoint usage
      (Basically the values `df(1)' delivers)

    - Disk utilization
      (Sectors read/written, number of read/write actions, time spent doing IO)

    - DNS traffic
      (query types, response codes, opcodes and traffic)

    - Email statistics
      (count, traffic, spam scores and checks)

    - Entropy available
      (Amount of entropy available to the system)

    - Exec
      (Values gatheres by a custom program or script)

    - Harddisk temperatures
      (Uhm, yeah, temperature of harddisks that is ;)

    - Interface traffic
      (Number of octets, packets and errors for each interface)

    - Iptables' counters
      (Number of bytes that were matched by a certain iptables rule)

    - IRQ counters
      (Frequency in which certain interrupts occur)

    - System load
      (Load average over the last 1, 5 and 15 minutes)

    - mbmon - motherboard monitoring
      (temperature, fanspeed and voltage information)

    - Memory utilization
      (Memory occupied by running processes, page cache, buffer cache and free)

    - Multimeter
      (Information provided by serial multimeters, such as the «Metex M-4650CR»)

    - MySQL server statistics
      (Commands issued, handlers triggered, thread usage, query cache
      utilization and traffic sent/received)

    - NFS Procedures
      (Which NFS command were called how often. Only NFSv2 and NFSv3 right now)

    - NTP Daemon
      (Local clock drift, offset to peers, etc)

    - Network UPS tools
      (UPS current, voltage, power, charge, utilisation, temperature, etc.)

    - Ping latency
      (Time to reach the default gateway or another given host)

    - Process counts
      (Number of running, sleeping, zombie, ... processes)

    - Sensors
      (lm_sensors voltages, temperatures and fan rotation speeds)

    - Serial
      (RX and TX of serial interfaces)

    - Swap
      (Pages swapped out onto harddisk or whatever is called `swap' by the OS..)

    - Tape
      (Read and write bytes and operations on tape devices)

    - Users
      (Currently logged in users)

    - VServer
      (System ressources used by vservers)

    - Wireless
      (Link quality of wireless cards)

  * Output to CSV- and RRD-files, send values over the network and/or provide a
    generic interface for use by other means, e. g. a Nagios-plugin.

  * Performance: Running as a daemon collectd doesn't spend much time in
    startup. Since collectd links against libping, librrd and libsensors it
    doesn't need to start any other processes.

  * Hardly any maintenance neccessary and setup is trivial.

  * Extremely easy and failsafe network operation possible.


Operation
---------

  * collectd's configuration file can be found at `sysconfdir'/collectd.conf.
    Run `collectd -h' for a list of builtin defaults. See `collectd.conf(5)'
    for a list of options and a syntax description.

  * When the `csv' or `rrdtool' plugins are loaded they'll write the values to
    files. The usual place for these files is beneath `/var/lib/collectd'.

  * When using some of the plugins, collectd needs to run as user root, since only
    root can do certain thing, such as craft ICMP packages needed to ping other
    hosts. collectd should NOT be installed setuid root since it can be used to
    overwrite valuable files..

  * Sample scripts to generate graphs reside in `contrib/' in the source
    package or somewhere near `/usr/share/doc/collectd' in most distributions.
    Please be aware that those script are meant as a starting point for your
    own experiments.. Some of them require the `RRDs' Perl module.
    (`librrds-perl' on Debian)

  * The RRAs of the automatically created RRD files depend on the `step'
    and `heartbeat' settings given. For a list of the default RRAs take a look
    in the collectd(1) manpage.


Prerequisites
-------------

  To compile collectd from source you will need:

  * Usual suspects: C compiler, linker, preprocessor, make, ...

  * A POSIX-threads (pthread) implementation.
    Since gathering some statistics is slow (network connections, slow devices,
    etc) the collectd is parellelized. The POSIX threads interface is being
    used and should be found in various implementations for hopefully all
    platforms.

  * libcurl (optional)
    If you want to use the `apache' plugin

  * libiptc (optional)
    For querying iptables counters.

  * libmysqlclient (optional)

  * liboping (optional, if not found a version shipped with this distribution
    can be used)
    Used by the `ping' plugin to send and receive ICMP packets.

  * libpcap (optional)
    Used to capture packets by the `dns' plugin.

  * librrd (optional; headers and library; rrdtool 1.0 and 1.2 both work fine)
    If built without `librrd' the resulting binary will be `client only', i.e.
    will send it's values via multicast and not create any RRD files itself.
    Alternatively you can chose to write CSV-files (Comma Seperated Values)
    instead.

  * libsensors (optional)
    To read from `lm_sensors'.

  * libstatgrab may be used to collect statistics on systems other than Linux
    and/or Solaris. Note that CPU- and disk-statistics, while being provided
    by this library, are not supported in collectd right now..
    <http://www.i-scream.org/libstatgrab/> 

  * libupsclient/nut (optional)
    For the `nut' plugin which queries nut's `upsd'.

  * librt, libsocket, libkstat, libdevinfo
    Various standard Solaris libraries which provide system functions.

  * CoreFoundation.framework and IOKit.framework
    For compiling on darwin in general and the `apple_sensors' plugin in
    particular.

Author
------

  Florian octo Forster <octo at verplant.org>

